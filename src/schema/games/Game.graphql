type Artwork {
    url: String
}

type Console {
    abbreviation: String
    id: String
    name: String
    slug: String
}

type Cover {
    id: String!
    url: String!
}

type Screenshot {
    id: String!
    url: String!
}

type Similar_Game {
    name: String
    cover: Cover
}

type Theme {
    name: String
    slug: String
}

type Game {
    console: Console
    cover: Cover
    id: String
    inBacklog: Boolean
    name: String!
    slug: String
}

type APIGame {
    artworks: [Artwork]
    cover: Cover
    id: String!
    name: String!
    platforms: [Console]
    screenshots: [Screenshot]
    similar_games: [APIGame]
    slug: String!
    storyline: String
    summary: String
    themes: [Theme]
}

type UserGame {
    game: Game!
    id: String
    userId: String
}

type Query {
    fetchGames: [Game]
    getGames: [UserGame]
    getGamesByConsoleId(consoleId: String!): [UserGame]
    getGameByGameId(gameId: String!): APIGame
    getGamesByName(name: String): [Game]
}

input UserGameInput {
    consoleId: String!
    consoleName: String!
    consoleSlug: String!
    name: String!
}

input GameInput {
    gameId: String
}

type Response {
    status: String
}

type Mutation {
    addUserGame(game: UserGameInput): Game
    removeGame(game: GameInput): Response
}
